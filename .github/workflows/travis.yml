name: CI

on:
  push:
    branches:
      - '!mlperf_**'
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fast-finish: true
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            python-version: '3.11'
            dist: jammy
            env:
              PACKAGE_INSTALL_AND_IMPORT: 'on'
              C_COMPILE_AND_RUN: 'on'
              PYTHON_EXE: python
          - os: ubuntu-latest
            python-version: '3.11'
            dist: jammy
            env:
              TF_CLASSIFY: 'on'
              PYTHON_EXE: python
          - os: ubuntu-latest
            python-version: '3.11'
            dist: jammy
            env:
              PYTORCH_CLASSIFY: 'on'
              PYTHON_EXE: python
          - os: ubuntu-latest
            python-version: '3.10.8'
            dist: jammy
            env:
              ONNX_CLASSIFY: 'on'
              PYTHON_EXE: python
          - os: ubuntu-latest
            python-version: '3.9'
            env:
              PYTORCH_BERT_DEMO: 'on'
              PYTHON_EXE: python
          - os: ubuntu-latest
            python-version: '3.9'
            env:
              ONNX_BERT_SQUAD: 'on'
              PYTHON_EXE: python
          - os: macos-latest
            python-version: '3.9.5'
            env:
              ONNX_CLASSIFY: 'on'
              PACKAGE_INSTALL_AND_IMPORT: 'on'
              C_COMPILE_AND_RUN: 'on'
              PYTHON_EXE: python3
          - os: windows-latest
            python-version: '3.9'
            env:
              ONNX_BERT_SQUAD: 'on'
              PYTHON_EXE: python
          - os: ubuntu-latest
            python-version: '3.8'
            env:
              ONNX_DETECTION: 'on'
              PYTHON_EXE: python
          - os: ubuntu-latest
            python-version: '3.8'
            env:
              PYTORCH_CLASSIFY: 'on'
              PYTHON_EXE: python
          - os: ubuntu-latest
            python-version: '3.7.15'
            env:
              TF_CLASSIFY: 'on'
              PYTHON_EXE: python
          - os: ubuntu-latest
            python-version: '3.6'
            env:
              ONNX_CLASSIFY: 'on'
              PYTHON_EXE: python
          - os: ubuntu-latest
            arch: ppc64le
            python-version: '3.6'
            env:
              PYTHON_EXE: python
              C_COMPILE_AND_RUN: 'on'
          - os: ubuntu-latest
            arch: s390x
            python-version: '3.6'
            env:
              PYTHON_EXE: python
              C_COMPILE_AND_RUN: 'on'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set environment variables
        run: |
          echo "PACKAGE_INSTALL_AND_IMPORT=${{ matrix.env.PACKAGE_INSTALL_AND_IMPORT }}" >> $GITHUB_ENV
          echo "C_COMPILE_AND_RUN=${{ matrix.env.C_COMPILE_AND_RUN }}" >> $GITHUB_ENV
          echo "TF_CLASSIFY=${{ matrix.env.TF_CLASSIFY }}" >> $GITHUB_ENV
          echo "PYTORCH_CLASSIFY=${{ matrix.env.PYTORCH_CLASSIFY }}" >> $GITHUB_ENV
          echo "ONNX_CLASSIFY=${{ matrix.env.ONNX_CLASSIFY }}" >> $GITHUB_ENV
          echo "PYTORCH_BERT_DEMO=${{ matrix.env.PYTORCH_BERT_DEMO }}" >> $GITHUB_ENV
          echo "ONNX_BERT_SQUAD=${{ matrix.env.ONNX_BERT_SQUAD }}" >> $GITHUB_ENV
          echo "ONNX_DETECTION=${{ matrix.env.ONNX_DETECTION }}" >> $GITHUB_ENV
          echo "PYTHON_EXE=${{ matrix.env.PYTHON_EXE }}" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          echo "TRAVIS_OS_NAME=${{ matrix.os }}, TRAVIS_PYTHON_VERSION=${{ matrix.python-version }}"
          which ${{ env.PYTHON_EXE }}
          ${{ env.PYTHON_EXE }} --version
          which git
          git --version
          wget https://raw.github.com/lehmannro/assert.sh/master/assert.sh
          python -m pip install --upgrade pip
          axs byname pip , available_versions numpy --+
          axs byname pip , available_versions pillow --+

      - name: Run tests
        run: |
          ${{ env.PYTHON_EXE }} function_access.py
          ${{ env.PYTHON_EXE }} param_source.py
          ${{ env.PYTHON_EXE }} runnable.py
          ${{ env.PYTHON_EXE }} stored_entry.py
          ${{ env.PYTHON_EXE }} kernel.py
          bash test_axs.sh
